<!--
Must:
- show dates
- better colors
- skip rhs of left thumb
- live feed (below)

Live feed:
client:
- login dialog
- retry for connection refused
- store in cookie
- logout
server:
- throttling

Publish:
- http://weblog.infoworld.com/udell/2005/12/20.html#a1357
- wiki page

Nice:
- rank sizes
- tooltips
- animate in graph
- mouseover graph
- hover tags
- clickable tags
- check large tags
- update during animation
- drag the selector itself
- grippers on thumbs
-->
<canvas proxied="false">
  <include href="incubator/tooltip/tooltip.lzx"/>
  <include href="thumb.lzx"/>
  <script src="analyzer.js"/>
  <script src="base64.js"/>
  <script src="colors.js"/>
  <splash/>
  
  <dataset name="ds" src="http:data.xml" request="true" ondata="canvas.processTags()"/>
  <!--dataset name="ds" src="http://del.icio.us/api/posts/all" ondata="canvas.processTags()"/-->
  
  <script>
    var account = 'osteele';
    var password = 'passwd';
    //ds.setHeader('authorization', 'Basic ' + base64(account + ':' + password));
    //ds.doRequest();
  </script>
  
  <method name="processTags">
    TagData = new DataFrame;
    TagData.processTags(ds.data);
    bars.drawGraph();
    bars.selector.setRange(0, TagData.columns.length);
    myview.animate('opacity', 1.0, 1000);
    //mylines.drawme();
  </method>
  
<view id="myview" width="100%" layout="axis: y" opacity="0.1">
  <view id="cloud" width="${parent.width-20}" x="10" height="200" bgcolor="#f0f0ff">
    <attribute name="rangeMin" value="null"/>
    <attribute name="rangeMax" value="null"/>
    <method name="setRange" args="a,b"><![CDATA[
      if (arguments.length < 1) a = 0;
      if (arguments.length < 2) b = TagData.columns.length;
      if (a == rangeMin && b == rangeMax) return;
      currentStart.setText(TagData.columnNames[a]);
      currentEnd.setText(TagData.columnNames[b-1]);
      //funnel.update();
      this.rangeMin = a;
      this.rangeMax = b;
      var tagCounts = TagData.tagTotals(a, b);
      
      var max = 0;
      var min = 100;
      for (var i = 0; i < tagCounts.length; i++) {
        var c = tagCounts[i];
        if (c > max) max = c;
        if (c < min) min = c;
      }
      
      str = '';
      for (var i = 0; i < tagCounts.length; i++) {
        var tagname = SortedTags[i];
        var count = tagCounts[TagSortInverse[i]];
        if (!count) continue;
        var s = (count - min) / (max - min);
        var c = Math.floor(255*(1-1.0*s));
        var fontsize = 10+12*s;
        var color = long2css(scaleColor(cloud.bgcolor, 0x0000FF, 0.25+0.75*s));
        str += '<font size=\"' + fontsize + '" color="' + color + '">' + tagname + ' </font>'
      }
      tags.setText(str);
    ]]></method>
    <text name="tags" multiline="true" width="100%" height="100%"/>
  </view>
  
  <drawview id="funnel" width="100%">
    <text id="currentStart" resize="true" align="left"/>
    <text id="currentEnd" resize="true" align="right"/>
    <method name="update" event="onx" reference="bars.selector">
      var h = 50;
      clear();
      beginPath();
      moveTo(cloud.getAttributeRelative('x', this), 0);
      lineTo(bars.selector.getAttributeRelative('x', this), h);
      lineTo(bars.selector.getAttributeRelative('x', this)+bars.selector.getAttributeRelative('width', this)-10, h);
      lineTo(cloud.getAttributeRelative('x', this)+cloud.getAttributeRelative('width', this), 0);
      this.fillStyle = cloud.bgcolor;
      fill();
    </method>
    <method event="onwidth" reference="bars.selector">
      update();
    </method>
  </drawview>
  
  <drawview id="bars"
            y="210" x="25%" width="50%" height="100"
            bgcolor="#f0f0ff">
    <method name="drawGraph"><![CDATA[
      var sums = TagData.dateSums();
      var w = this.step = width/sums.length;
      var max = 0;
      for (var i = 0; i < sums.length; i++)
        if (sums[i] > max) max = sums[i];
      beginPath();
      this.moveTo(0,100);
      for (var i = 0; i < sums.length; i++) {
        var x = i*w;
        var y = height - sums[i]*height/max;
        if (y > 100) Debug.write(sums[i], max, sums[i]*height/max);
        //if (i == 0) {moveTo(x, y)}
        lineTo(x,y);
        lineTo(x+w,y);
      }
      this.moveTo(width,100);
      this.fillStyle = this.strokeStyle = 0x8080ff;
      this.fill();
      //this.stroke();
      selector.setRange(0, sums.length);
    ]]></method>
    
    <!--method event="onclick">
      selector.setXRange(getMouse('x'), null);
    </method-->
    
    <view name="selector" height="100%">
      <method name="setRange" args="d0, d1"><![CDATA[
        if (d0 < 0) return;
        if (d1 > TagData.columns.length) return;
        if (d0 >= d1) return;
        var w = bars.step;
        animate('x', d0*w, 200);
        animate('width', (d1-d0)*w, 200);
        cloud.setRange(d0, d1);
      ]]></method>
      <method name="setXRange" args="x0, x1">
        var w = bars.step;
        if (x0 == null) x0 = this.x;
        if (x1 == null) x1 = x0 + this.width;
        var d0 = Math.floor(x0/w);
        var d1 = Math.floor(x1/w);
        this.setRange(d0, d1);
      </method>
      
      <!--view bgcolor="red" opacity="0.25" height="100%" width="100%"/-->
      <!--view bgcolor="white" opacity="0.25" height="80%" width="40%" x="40%" y="10%"/-->
      
      <!--drawview width="100%" height="20" y="-20">
        <method event="onx">f()</method>
        <method event="onx">f()</method>
        <method name="f" event="oninit">
          beginPath();
          moveTo(0, height);
          lineTo(-parent.x, 0);
          stroke();
        </method>
      </drawview-->
      
      <!-- masks -->
      <view x="${-parent.x}" width="${parent.x}" height="100%"
            bgcolor="white" opacity="0.80"/>
      <view x="${parent.width}"
            width="${parent.parent.width-parent.x-parent.width}"
            height="100%"
            bgcolor="white" opacity="0.80"/>
      
      <!-- left dragger -->
      <thumb x="-10" width="10" height="20"
             valign="middle" side="left"
             onmousedown="this.x1 = parent.x+parent.width;
                          drag.apply()"
             onmouseup="drag.remove()">
        <state name="drag">
          <attribute name="x" value="${parent.setXRange(parent.parent.getMouse('x'), this.x1)}"/>
        </state>
      </thumb>
      
      <!-- right dragger -->
      <thumb width="10" height="20" x="${parent.width}"
             valign="middle" side="right"
             onmousedown="drag.apply()" onmouseup="drag.remove()">
        <state name="drag">
          <attribute name="x" value="${parent.setXRange(null, parent.parent.getMouse('x'))}"/>
        </state>
      </thumb>
      
      <!-- bottom dragger -->
      <thumb id="bd" width="40" height="10" y="${parent.height}"
             align="center"
             onmousedown="this.sx = parent.x - parent.parent.getMouse('x');
                          drag.apply()"
             onmouseup="drag.remove()"
             side="bottom"
             opacity="${parent.width==parent.parent.width ? 0.25 : 1.0}"
             tooltip="Drag to select a different range of dates">
        <state name="drag">
          <attribute name="x"
		     value="${parent.setXRange(this.sx+parent.parent.getMouse('x'), null)}"/>
        </state>
      </thumb>
    </view>
  </drawview>
</view>
  
  <debug x="610"/>
</canvas>
