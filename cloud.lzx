<!--
Must:
- bottom dragger
- right dragger
- show dates
- variable-height cloud
- live feed

Nice:
- animate in graph
- mouseover graph
- hover tags
- clickable tags
- check large tags
- update during animation
-->
<canvas proxied="false">
  <include href="debugger/debugger.lzx"/>
  <splash/>
  <dataset name="ds" src="http:data.xml" request="true" ondata="canvas.processTags()"/>
  <!-- dataset name="ds" src="http://del.icio.us/api/posts/all" request="true" ondata="canvas.processTags()"/-->

  <script>
    TagList = [];
    TagMap = {};
    TagElements = [];
    Dates = [];
    DateMap = {}; // {Date -> [tagIndex => count]}
    CountArray = [];
    SortedTags = [];
    TagSortInverse = [];
    MaxTag = 0;
    function getNow() {return (new Date).getTime()}
  </script>
  
  <method name="processTags"><![CDATA[
    var posts = ds.data.childNodes;
    var count = 0;
    for (var i in posts) {
      var post = posts[i];
      var date = post.attributes['time'].split('T')[0];
      var tags = post.attributes['tag'].split(' ');
      var di = DateMap[date];
      if (!(di >= 0)) {
        DateMap[date] = di = Dates.length;
        Dates.push(date);
        CountArray.push([]);
      }
      var counts = CountArray[di];
      for (var j in tags) {
        var tag = tags[j];
        var ti = TagMap[tag];
        if (!(ti >= 0)) {
          TagMap[tag] = ti = TagList.length;
          TagList.push(tag);
        }
        while (counts.length <= ti) counts.push(0);
        c = counts[ti] += 1;
        if (c > MaxTag) MaxTag = c;
      }
      //if (++count >= 150) break;
    }
    
    SortedTags = [].concat(TagList);
    SortedTags.sort();
    TagSortInverse = [];
    for (var i = 0; i < SortedTags.length; i++) {
      var tagname = SortedTags[i];
      var j = 0;
      while (TagList[j] != tagname) j++;
      TagSortInverse.push(j);
    }
    //cloud.setRange(0, Dates.length);
    bars.drawGraph();
    bars.selector.setRange(0, Dates.length);
    mylines.drawme();
  ]]></method>
  
  <method name="tagTotals" args="a, b"><![CDATA[
    var tagCounts = [];
    for (var i = a; i < b; i++) {
      var column = CountArray[i];
      for (var t = 0; t < column.length; t++) {
        while (t >= tagCounts.length) tagCounts.push(0);
        tagCounts[t] += column[t];
      }
    }
    while (tagCounts.length < TagList.length) tagCounts.push(0);
    return tagCounts;
  ]]></method>
  
  <method name="dateSums"><![CDATA[
    var sums = [];
    for (var i = 0; i < CountArray.length; i++) {
      var column = CountArray[i];
      var sum = 0;
      for (var t = 0; t < column.length; t++) {
        sum += column[t];
      }
      sums.push(sum);
    }
    return sums;
  ]]></method>
  
  <script><![CDATA[
    function long2css(n) {
      var a = "0123456789ABCDEF";
      var s = '#';
      for (var i = 24; (i -= 4) >= 0; ) {
        s += a.charAt((n>>i) & 0xf);
      }
      return s;
    }
    
    function scaleColor(a, b, s) {
      var n = 0;
      for (var i = 24; (i -= 8) >= 0; ) {
        var ca = (a >> i) & 0xff;
        var cb = (b >> i) & 0xff;
        var cc = Math.floor(ca*(1-s) + cb*s);
        n |= cc << i;
      }
      return n;
    }
  ]]></script>
  
  <view id="cloud" width="600" height="200" bgcolor="#f0f0ff">
    <attribute name="rangeMin" value="null"/>
    <attribute name="rangeMax" value="null"/>
    <method name="setRange" args="a,b"><![CDATA[
      if (arguments.length < 1) a = 0;
      if (arguments.length < 2) b = Dates.length;
      if (a == rangeMin && b == rangeMax) return;
      this.rangeMin = a;
      this.rangeMax = b;
      var tagCounts = canvas.tagTotals(a, b);
      
      var max = 0;
      var min = 100;
      for (var i = 0; i < tagCounts.length; i++) {
        var c = tagCounts[i];
        if (c > max) max = c;
        if (c < min) min = c;
      }
      
      str = '';
      for (var i = 0; i < tagCounts.length; i++) {
        var tagname = SortedTags[i];
        var count = tagCounts[TagSortInverse[i]];
        if (!count) continue;
        var s = (count - min) / (max - min);
        var c = Math.floor(255*(1-1.0*s));
        var fontsize = 10+12*s;
        var color = long2css(scaleColor(cloud.bgcolor, 0x0000FF, 0.25+0.75*s));
        str += '<font size=\"' + fontsize + '" color="' + color + '">' + tagname + ' </font>'
      }
      tags.setText(str);
    ]]></method>
    <text name="tags" multiline="true" width="100%" height="100%"/>
  </view>
  
  <drawview id="bars" y="210" width="600" height="100" bgcolor="#ffffc0">
    <method name="drawGraph"><![CDATA[
      var sums = canvas.dateSums();
      var w = this.step = width/sums.length;
      var max = 0;
      for (var i = 0; i < sums.length; i++) {
        if (sums[i] > max) max = sums[i];
      }
      beginPath();
      for (var i = 0; i < sums.length; i++) {
        var x = i*w;
        var y = height - sums[i]*height/max;
        if (i == 0) {moveTo(x, y)}
        lineTo(x,y);
        lineTo(x+w,y);
      }
      this.strokeStyle = 0xff8080;
      this.stroke();
      selector.setRange(0, sums.length);
    ]]></method>
    
    <method event="onclick">
      selector.setXRange(getMouse('x'), null);
    </method>
    
    <view name="selector" bgcolor="red" opacity="0.25" height="${parent.height}">
      <method name="setRange" args="d0, d1"><![CDATA[
        if (d0 < 0) return;
        if (d1 > Dates.length) return;
        if (d0 >= d1) return;
        var w = bars.step;
        animate('x', d0*w, 200);
        animate('width', (d1-d0)*w, 200);
        cloud.setRange(d0, d1);
      ]]></method>
      <method name="setXRange" args="x0, x1">
        var w = bars.step;
        if (x0 == null) x0 = this.x;
        if (x1 == null) x1 = x0 + this.width;
        var d0 = Math.floor(x0/w);
        var d1 = Math.floor(x1/w);
        this.setRange(d0, d1);
      </method>
      <!-- right dragger -->
      <view width="10" height="20" x="${parent.width}" y="${parent.height/2}" bgcolor="red"
            onmousedown="d.apply()" onmouseup="d.remove()">
        <state name="d">
          <attribute name="x" value="${parent.setXRange(null, parent.parent.getMouse('x'))}"/>
        </state>
      </view>
      <!-- bottom dragger -->
      <view y="${parent.height}" width="40"
            onmousedown="this.sx = parent.x - parent.parent.getMouse('x'); d.apply()"
            onmouseup="d.remove()"
            resource="scrolldraghorz.swf" stretches="width">
        <!--view resource="scrolldragdimples.swf"/-->
        <state name="d">
          <attribute name="x" value="${parent.setXRange(this.sx+parent.parent.getMouse('x'), null)}"/>
        </state>
      </view>
    </view>
  </drawview>
  
<?ignore
  <drawview id="mylines" y="${bars.y + bars.height+20}"
            width="${bars.width}" height="350" bgcolor="yellow">
    <attribute name="row" value="0"/>
    <method event="onclick">
      row = ++row % TagList.length;
      clear();
      drawme();
    </method>
    <method name="drawme"><![CDATA[
      var w = this.width/CountArray.length;
      var h = this.height/TagList.length*2;
      for (var j = 0; j < TagList.length/2; j++) {
        //if (j != row) continue;
        var y = (j+0.5)*h;
        Debug.write(y);
        beginPath();
        for (var i = 0; i < CountArray.length; i++) {
          var s = CountArray[i][j]/MaxTag;
          if (s == undefined) s = 0;
          var x = i*w;
          if (i == 0) moveTo(x, y);
          var y0 = y - s*h/2;
          //Debug.write(c, y, y0);
          lineTo(x+w/2, y0);
        }
        lineTo(x+w, y0);
        lineTo(x+w, y0*2-y);
        /*for (var i = CountArray.length; --i; ) {
          var c = CountArray[i][j];
          var x = i*w;
          var y1 = y;
          var ww = c*h/MaxTag/2;
          ww = i*5/CountArray.length;
          y1 += ww/2;
          lineTo(x+w/2, y1);
        }*/
        lineTo(0, y);
        closePath();
        this.fillStyle = 0x0000ff;
        this.fill();
      }
    ]]></method>
  </drawview>
?>
  
  <debug x="610"/>
</canvas>
