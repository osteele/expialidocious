<canvas proxied="false">
  <include href="debugger/debugger.lzx"/>
  <splash/>
  <dataset name="ds" src="http:data.xml" request="true" ondata="canvas.process()"/>
  <!-- dataset name="ds" src="http://del.icio.us/api/posts/all" request="true" ondata="canvas.process()"/-->

  <script>
    TagList = [];
    TagMap = {};
    TagElements = [];
    Dates = [];
    DateMap = {}; // {Date -> [tagIndex => count]}
    CountArray = [];
    SortedTags = [];
    TagSortInverse = [];
  </script>
  
  <method name="process"><![CDATA[
    var posts = ds.data.childNodes;
    var count = 0;
    for (var i in posts) {
      var post = posts[i];
      var date = post.attributes['time'].split('T')[0];
      var tags = post.attributes['tag'].split(' ');
      var di = DateMap[date];
      if (!(di >= 0)) {
        DateMap[date] = di = Dates.length;
        Dates.push(date);
        CountArray.push([]);
      }
      var counts = CountArray[di];
      for (var j in tags) {
        var tag = tags[j];
        var ti = TagMap[tag];
        if (!(ti >= 0)) {
          TagMap[tag] = ti = TagList.length;
          TagList.push(tag);
        }
        while (counts.length <= ti) counts.push(0);
        counts[ti] += 1;
      }
      if (++count >= 150) break;
    }

      SortedTags = [].concat(TagList);
      SortedTags.sort();
      TagSortInverse = [];
      for (var i = 0; i < SortedTags.length; i++) {
        var tagname = SortedTags[i];
        var j = 0;
        while (TagList[j] != tagname) j++;
        TagSortInverse.push(j);
      }
      
    /*Debug.write('TagList =', TagList);
    Debug.write('TagMap = ', TagMap);
    Debug.write('Dates =', Dates);
    Debug.write('DateMap =', DateMap);
    Debug.write('CountArray =', CountArray);
    for (var i = 0; i < CountArray.length; i++)
      Debug.write('  [' + i + '] =', CountArray[i]);*/
    cloud.setRange();
    bars.drawGraph();
  ]]></method>
  
  <method name="tagTotals" args="a, b"><![CDATA[
    var tagCounts = [];
    for (var i = a; i < b; i++) {
      var column = CountArray[i];
      for (var t = 0; t < column.length; t++) {
        while (t >= tagCounts.length) tagCounts.push(0);
        tagCounts[t] += column[t];
      }
    }
    while (tagCounts.length < TagList.length) tagCounts.push(0);
    return tagCounts;
  ]]></method>
  
  <method name="dateSums"><![CDATA[
    var sums = [];
    for (var i = 0; i < CountArray.length; i++) {
      var column = CountArray[i];
      var sum = 0;
      for (var t = 0; t < column.length; t++) {
        sum += column[t];
      }
      sums.push(sum);
    }
    return sums;
  ]]></method>
  
  <script><![CDATA[
    function long2css(n) {
      var a = "0123456789ABCDEF";
      var s = '#';
      for (var i = 24; (i -= 4) >= 0; ) {
        s += a.charAt((n>>i) & 0xf);
      }
      return s;
    }
    
    function scaleColor(a, b, s) {
      var n = 0;
      for (var i = 24; (i -= 8) >= 0; ) {
        var ca = (a >> i) & 0xff;
        var cb = (b >> i) & 0xff;
        var cc = Math.floor(ca*(1-s) + cb*s);
        n |= cc << i;
      }
      return n;
    }
  ]]></script>
  
  <view id="cloud" width="600" height="200" bgcolor="#f0f0ff">
    <attribute name="rangeMin" value="null"/>
    <attribute name="rangeMax" value="null"/>
    <method name="setRange" args="a,b"><![CDATA[
      if (arguments.length < 1) a = 0;
      if (arguments.length < 2) b = Dates.length;
      if (a == rangeMin && b == rangeMax) return;
      this.rangeMin = a;
      this.rangeMax = b;
//Debug.write(a, b);
      var tagCounts = canvas.tagTotals(a, b);
/*Debug.write(canvas.dateSums()[a]);
Debug.write(CountArray[a]);
Debug.write(tagCounts);
Debug.write(TagList);
Debug.write(SortedTags);
Debug.write(TagSortInverse);*/
      
      var max = 0;
      var min = 100;
      for (var i = 0; i < tagCounts.length; i++) {
        var c = tagCounts[i];
        if (c > max) max = c;
        if (c < min) min = c;
      }
      
      str = '';
      for (var i = 0; i < tagCounts.length; i++) {
        var tagname = SortedTags[i];
        var count = tagCounts[TagSortInverse[i]];
        if (!count) continue;
        var s = (count - min) / (max - min);
        var c = Math.floor(255*(1-1.0*s));
        var fontsize = 10+12*s;
        var color = long2css(scaleColor(cloud.bgcolor, 0x0000FF, 0.25+0.75*s));
        str += '<font size=\"' + fontsize + '" color="' + color + '">' + tagname + ' </font>'
      }
      tags.setText(str);
    ]]></method>
    <text name="tags" multiline="true" width="100%" height="100%"/>
  </view>
  
  <drawview id="bars" width="600" height="100" y="200" bgcolor="#ffffc0">
    <method name="drawGraph"><![CDATA[
      var sums = canvas.dateSums();
      var w = this.step = width/sums.length;
      selector.setAttribute('width', w);
      var max = 0;
      for (var i = 0; i < sums.length; i++) {
        if (sums[i] > max) max = sums[i];
      }
      beginPath();
      for (var i = 0; i < sums.length; i++) {
        var x = i*w;
        var y = height - sums[i]*height/max;
        if (i == 0) {moveTo(0, y)}
        lineTo(x,y);
        lineTo(x+w,y);
      }
      this.strokeStyle = 0xff8080;
      this.stroke();
    ]]></method>
    
    <method event="onclick">
      return selector.setMyX(getMouse('x'));
      var i = Math.floor(getMouse('x')/this.step);
      //Debug.write(i);
      selector.animate('x', i*this.step, 500);
      selector.animate('width', this.step, 400);
      cloud.setRange(i, i+1);
    </method>
    
    <view name="selector" bgcolor="red" opacity="0.25" width="100%" height="${parent.height}">
      <method name="setRange" args="a, b"><![CDATA[
        if (a < 0) return;
        if (b >= Dates.length) return;
        if (a >= b) return;
        var w = bars.step;
        animate('x', a*w, 200);
        animate('width', (b-a)*w, 200);
        cloud.setRange(a, b);
      ]]></method>
      <method name="setMyX" args="x">
        var w = bars.step;
        var i = Math.floor(x/w);
        var j = i + this.width/w;
        this.setRange(i, j);
      </method>
      <!-- bottom dragger -->
      <view width="100%" height="20" y="${parent.height}" bgcolor="red"
            onmousedown="startDrag()" onmouseup="d.remove()">
        <method name="startDrag">
          d.xstart = parent.parent.getMouse('x');
          d.apply();
        </method>
        <state name="d">
          <attribute name="xstart" value="parent.parent.getMouse('x')" when="once"/>
          <attribute name="x" value="${parent.setMyX(parent.parent.getMouse('x'))}"/>
          <method name="setit" args="x">
            parent.setMyX(x);
          </method>
        </state>
      </view>
    </view>
    
  </drawview>
</canvas>
