<!--
Must:
- bottom dragger
- right dragger
- show dates
- variable-height cloud
- live feed

Nice:
- animate in graph
- mouseover graph
- hover tags
- clickable tags
- check large tags
- update during animation
-->
<canvas proxied="false">
  <script src="analyzer.js"/>
  <script src="colors.js"/>
  <splash/>
  
  <dataset name="ds" src="http:data.xml" request="true" ondata="canvas.processTags()"/>
  <!-- dataset name="ds" src="http://del.icio.us/api/posts/all" request="true" ondata="canvas.processTags()"/-->
  
  <method name="processTags" args="ds">
    TagData.processTags(ds.data);
    bars.drawGraph();
    bars.selector.setRange(0, Dates.length);
    //mylines.drawme();
  </method>
  
  <view id="cloud" width="600" height="200" bgcolor="#f0f0ff">
    <attribute name="rangeMin" value="null"/>
    <attribute name="rangeMax" value="null"/>
    <method name="setRange" args="a,b"><![CDATA[
      if (arguments.length < 1) a = 0;
      if (arguments.length < 2) b = Dates.length;
      if (a == rangeMin && b == rangeMax) return;
      this.rangeMin = a;
      this.rangeMax = b;
      var tagCounts = TagData.tagTotals(a, b);
      
      var max = 0;
      var min = 100;
      for (var i = 0; i < tagCounts.length; i++) {
        var c = tagCounts[i];
        if (c > max) max = c;
        if (c < min) min = c;
      }
      
      str = '';
      for (var i = 0; i < tagCounts.length; i++) {
        var tagname = SortedTags[i];
        var count = tagCounts[TagSortInverse[i]];
        if (!count) continue;
        var s = (count - min) / (max - min);
        var c = Math.floor(255*(1-1.0*s));
        var fontsize = 10+12*s;
        var color = long2css(scaleColor(cloud.bgcolor, 0x0000FF, 0.25+0.75*s));
        str += '<font size=\"' + fontsize + '" color="' + color + '">' + tagname + ' </font>'
      }
      tags.setText(str);
    ]]></method>
    <text name="tags" multiline="true" width="100%" height="100%"/>
  </view>
  
  <drawview id="bars" y="210" width="600" height="100" bgcolor="#ffffc0">
    <method name="drawGraph"><![CDATA[
      var sums = TagData.dateSums();
      var w = this.step = width/sums.length;
      var max = 0;
      for (var i = 0; i < sums.length; i++) {
        if (sums[i] > max) max = sums[i];
      }
      beginPath();
      for (var i = 0; i < sums.length; i++) {
        var x = i*w;
        var y = height - sums[i]*height/max;
        if (i == 0) {moveTo(x, y)}
        lineTo(x,y);
        lineTo(x+w,y);
      }
      this.strokeStyle = 0xff8080;
      this.stroke();
      selector.setRange(0, sums.length);
    ]]></method>
    
    <method event="onclick">
      selector.setXRange(getMouse('x'), null);
    </method>
    
    <view name="selector" bgcolor="red" opacity="0.25" height="${parent.height}">
      <method name="setRange" args="d0, d1"><![CDATA[
        if (d0 < 0) return;
        if (d1 > Dates.length) return;
        if (d0 >= d1) return;
        var w = bars.step;
        animate('x', d0*w, 200);
        animate('width', (d1-d0)*w, 200);
        cloud.setRange(d0, d1);
      ]]></method>
      <method name="setXRange" args="x0, x1">
        var w = bars.step;
        if (x0 == null) x0 = this.x;
        if (x1 == null) x1 = x0 + this.width;
        var d0 = Math.floor(x0/w);
        var d1 = Math.floor(x1/w);
        this.setRange(d0, d1);
      </method>
      <!-- right dragger -->
      <view width="10" height="20" x="${parent.width}" y="${parent.height/2}" bgcolor="red"
            onmousedown="d.apply()" onmouseup="d.remove()">
        <state name="d">
          <attribute name="x" value="${parent.setXRange(null, parent.parent.getMouse('x'))}"/>
        </state>
      </view>
      <!-- bottom dragger -->
      <view y="${parent.height}" width="40"
            onmousedown="this.sx = parent.x - parent.parent.getMouse('x'); d.apply()"
            onmouseup="d.remove()"
            resource="handle.png">
        <!--view resource="scrolldragdimples.swf"/-->
        <state name="d">
          <attribute name="x" value="${parent.setXRange(this.sx+parent.parent.getMouse('x'), null)}"/>
        </state>
      </view>
    </view>
  </drawview>
  
  <debug x="610"/>
</canvas>
